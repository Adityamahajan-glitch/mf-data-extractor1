{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34ff813a-3eff-479e-86c1-9eeef555aac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# === Streamlit AMFI NAV Dashboard ===\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import requests\n",
    "from datetime import datetime, timedelta\n",
    "from ta.trend import SMAIndicator, MACD\n",
    "from ta.momentum import RSIIndicator\n",
    "from pytz import utc\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# === Helper Functions ===\n",
    "def convert_date_to_utc_datetime(date_string):\n",
    "    return datetime.strptime(date_string, \"%d-%b-%Y\").replace(tzinfo=utc)\n",
    "\n",
    "def split_date_range(start_date_str, end_date_str, max_duration=90):\n",
    "    start_date = datetime.strptime(start_date_str, \"%d-%b-%Y\")\n",
    "    end_date = datetime.strptime(end_date_str, \"%d-%b-%Y\")\n",
    "    ranges = []\n",
    "    current = start_date\n",
    "    while current <= end_date:\n",
    "        chunk_end = min(current + timedelta(days=max_duration - 1), end_date)\n",
    "        ranges.append((current, chunk_end))\n",
    "        current = chunk_end + timedelta(days=1)\n",
    "    return ranges\n",
    "\n",
    "def fetch_amfi_data(start_date_str, end_date_str):\n",
    "    nav_list = []\n",
    "    for start, end in split_date_range(start_date_str, end_date_str):\n",
    "        url = f\"https://portal.amfiindia.com/DownloadNAVHistoryReport_Po.aspx?&frmdt={start.strftime('%d-%b-%Y')}&todt={end.strftime('%d-%b-%Y')}\"\n",
    "        response = requests.get(url)\n",
    "        lines = response.text.split('\\r\\n')\n",
    "        Structure = Category = Sub_Category = amc = \"\"\n",
    "        j = 1\n",
    "        for line in lines[1:]:\n",
    "            split = line.split(\";\")\n",
    "            if j == len(lines) - 1:\n",
    "                break\n",
    "            if split[0] == \"\":\n",
    "                if lines[j] == lines[j + 1]:\n",
    "                    sch_cat = lines[j - 1].split(\"(\")\n",
    "                    sch_cat[-1] = sch_cat[-1][:-2].strip()\n",
    "                    sch_cat = [s.strip() for s in sch_cat]\n",
    "                    if \"-\" in sch_cat[1]:\n",
    "                        sub = sch_cat[1].split(\"-\")\n",
    "                        sch_cat.pop(-1)\n",
    "                        sch_cat += [s.strip() for s in sub]\n",
    "                    else:\n",
    "                        sch_cat += [\"\", sch_cat.pop(-1)]\n",
    "                    Structure, Category, Sub_Category = sch_cat[:3]\n",
    "                elif \"Mutual Fund\" in lines[j + 1]:\n",
    "                    amc = lines[j + 1]\n",
    "            elif len(split) > 1:\n",
    "                try:\n",
    "                    code = int(split[0].strip())\n",
    "                    name = split[1].strip()\n",
    "                    dg = \"Growth\" if \"growth\" in name.lower() else \"IDCW\" if \"idcw\" in name.lower() or \"dividend\" in name.lower() else \"\"\n",
    "                    inv_src = \"Direct\" if \"direct\" in name.lower() else \"Regular\" if \"regular\" in name.lower() else \"\"\n",
    "                    nav = float(split[4].strip()) if split[4].strip() else None\n",
    "                    date = convert_date_to_utc_datetime(split[7].strip())\n",
    "                    nav_list.append({\n",
    "                        \"Structure\": Structure,\n",
    "                        \"Category\": Category,\n",
    "                        \"Sub_Category\": Sub_Category,\n",
    "                        \"AMC\": amc,\n",
    "                        \"Code\": code,\n",
    "                        \"Name\": name,\n",
    "                        \"Source\": inv_src,\n",
    "                        \"Option\": dg,\n",
    "                        \"Date\": date,\n",
    "                        \"NAV\": nav\n",
    "                    })\n",
    "                except:\n",
    "                    pass\n",
    "            j += 1\n",
    "    return pd.DataFrame(nav_list)\n",
    "\n",
    "# === UI ===\n",
    "st.title(\"📊 AMFI Mutual Fund NAV Dashboard\")\n",
    "st.markdown(\"Created using **Streamlit** | Data Source: [AMFI India](https://portal.amfiindia.com/)\")\n",
    "\n",
    "with st.sidebar:\n",
    "    start_date = st.date_input(\"Fetch From Date\", datetime(2025, 4, 1))\n",
    "    end_date = st.date_input(\"Fetch To Date\", datetime(2025, 6, 30))\n",
    "    if st.button(\"📥 Fetch Data\"):\n",
    "        with st.spinner(\"Fetching data from AMFI...\"):\n",
    "            df_nav = fetch_amfi_data(start_date.strftime('%d-%b-%Y'), end_date.strftime('%d-%b-%Y'))\n",
    "            if df_nav.empty:\n",
    "                st.error(\"❌ No data returned from AMFI.\")\n",
    "            else:\n",
    "                st.session_state[\"df_nav\"] = df_nav\n",
    "                st.success(f\"✅ Loaded {len(df_nav)} records.\")\n",
    "\n",
    "# === Main View ===\n",
    "if \"df_nav\" in st.session_state:\n",
    "    df_nav = st.session_state[\"df_nav\"]\n",
    "\n",
    "    selected_amc = st.selectbox(\"Select AMC\", sorted(df_nav[\"AMC\"].dropna().unique()))\n",
    "    schemes = df_nav[df_nav[\"AMC\"] == selected_amc][\"Name\"].unique()\n",
    "    selected_scheme = st.selectbox(\"Select Scheme\", schemes)\n",
    "\n",
    "    filtered_df = df_nav[df_nav[\"Name\"] == selected_scheme].copy()\n",
    "    min_date, max_date = filtered_df[\"Date\"].min().date(), filtered_df[\"Date\"].max().date()\n",
    "\n",
    "    col1, col2 = st.columns(2)\n",
    "    with col1:\n",
    "        f_date = st.date_input(\"From Date\", min_date)\n",
    "    with col2:\n",
    "        t_date = st.date_input(\"To Date\", max_date)\n",
    "\n",
    "    filtered_df = filtered_df[\n",
    "        (filtered_df[\"Date\"].dt.date >= f_date) & (filtered_df[\"Date\"].dt.date <= t_date)\n",
    "    ].copy()\n",
    "\n",
    "    sma1 = st.number_input(\"SMA 1\", min_value=1, value=50)\n",
    "    sma2 = st.number_input(\"SMA 2\", min_value=1, value=100)\n",
    "    sma3 = st.number_input(\"SMA 3\", min_value=1, value=200)\n",
    "\n",
    "    # Add Indicators\n",
    "    filtered_df[\"RSI_14\"] = RSIIndicator(close=filtered_df[\"NAV\"], window=14).rsi()\n",
    "    macd = MACD(close=filtered_df[\"NAV\"], window_slow=26, window_fast=12, window_sign=9)\n",
    "    filtered_df[\"MACD\"] = macd.macd()\n",
    "    filtered_df[\"Signal\"] = macd.macd_signal()\n",
    "    filtered_df[f\"SMA_{sma1}\"] = SMAIndicator(filtered_df[\"NAV\"], sma1).sma_indicator()\n",
    "    filtered_df[f\"SMA_{sma2}\"] = SMAIndicator(filtered_df[\"NAV\"], sma2).sma_indicator()\n",
    "    filtered_df[f\"SMA_{sma3}\"] = SMAIndicator(filtered_df[\"NAV\"], sma3).sma_indicator()\n",
    "\n",
    "    # Plot\n",
    "    fig = make_subplots(rows=3, cols=1, shared_xaxes=True, vertical_spacing=0.04,\n",
    "                        subplot_titles=[\"NAV & SMAs\", \"RSI (14)\", \"MACD\"])\n",
    "\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[\"NAV\"], name=\"NAV\", line=dict(color=\"cyan\")), row=1, col=1)\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[f\"SMA_{sma1}\"], name=f\"SMA {sma1}\", line=dict(dash=\"dot\")), row=1, col=1)\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[f\"SMA_{sma2}\"], name=f\"SMA {sma2}\", line=dict(dash=\"dot\")), row=1, col=1)\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[f\"SMA_{sma3}\"], name=f\"SMA {sma3}\", line=dict(dash=\"dot\")), row=1, col=1)\n",
    "\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[\"RSI_14\"], name=\"RSI\", line=dict(color=\"violet\")), row=2, col=1)\n",
    "    fig.add_shape(type=\"line\", x0=min_date, x1=max_date, y0=70, y1=70, line=dict(dash=\"dot\", color=\"red\"), row=2, col=1)\n",
    "    fig.add_shape(type=\"line\", x0=min_date, x1=max_date, y0=30, y1=30, line=dict(dash=\"dot\", color=\"green\"), row=2, col=1)\n",
    "\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[\"MACD\"], name=\"MACD\", line=dict(color=\"aqua\")), row=3, col=1)\n",
    "    fig.add_trace(go.Scatter(x=filtered_df[\"Date\"], y=filtered_df[\"Signal\"], name=\"Signal\", line=dict(dash=\"dot\", color=\"white\")), row=3, col=1)\n",
    "\n",
    "    fig.update_layout(height=900, title=f\"{selected_scheme} - NAV Chart\", template=\"plotly_dark\")\n",
    "    st.plotly_chart(fig, use_container_width=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
